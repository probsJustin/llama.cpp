FROM ubuntu:22.04 as build

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    build-essential \
    cmake \
    curl \
    libssl-dev \
    pkg-config \
    python3 \
    python3-pip \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Install OpenTelemetry CPP dependencies
RUN apt-get update && apt-get install -y \
    libcurl4-openssl-dev \
    nlohmann-json3-dev \
    libgtest-dev \
    libprotobuf-dev \
    protobuf-compiler \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Clone and build OpenTelemetry CPP
RUN git clone --recurse-submodules https://github.com/open-telemetry/opentelemetry-cpp.git && \
    cd opentelemetry-cpp && \
    mkdir build && \
    cd build && \
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
        -DBUILD_TESTING=OFF \
        -DWITH_OTLP=ON \
        -DWITH_OTLP_GRPC=ON \
        -DWITH_OTLP_HTTP=OFF \
        -DWITH_EXAMPLES=OFF && \
    make -j$(nproc) && \
    make install && \
    ldconfig

# Copy llama.cpp source code
COPY . /build/llama.cpp/

# Add OpenTelemetry instrumentation
WORKDIR /build/llama.cpp

# Create OpenTelemetry wrapper layer
RUN mkdir -p common/otel

# Copy llama.cpp source code and apply instrumentation
WORKDIR /build/llama.cpp

# Build llama.cpp with OpenTelemetry support
RUN mkdir -p build && \
    cd build && \
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DLLAMA_NATIVE=ON \
        -DLLAMA_BLAS=ON \
        -DLLAMA_BUILD_SERVER=ON \
        -DLLAMA_OTEL_ENABLE=ON && \
    cmake --build . --config Release -j $(nproc)

# Create final image
FROM ubuntu:22.04

RUN apt-get update && apt-get install -y \
    libcurl4 \
    ca-certificates \
    libssl3 \
    libprotobuf23 \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy binaries from build stage
COPY --from=build /build/llama.cpp/build/bin /app/
COPY --from=build /build/llama.cpp/build/examples /app/examples
COPY --from=build /build/llama.cpp/build/tools /app/tools
COPY --from=build /usr/local/lib/ /usr/local/lib/

# Update library path
RUN ldconfig

# Set entrypoint
ENTRYPOINT ["/app/server"]

# Default command
CMD ["-h"]